name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Display .NET version
        run: dotnet --version

      - name: Set VERSION variable from tag
        run: echo "VERSION=0.0.0" | Out-File -FilePath $env:GITHUB_ENV

      - name: Download References
        shell: pwsh
        run: |
          .\Download-References.ps1

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
          
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd src\
          New-Item -Path .\.\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.\.sonar\scanner
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          cd src\
          .\.\.sonar\scanner\dotnet-sonarscanner begin /k:"atlas-rust-servers_ui-framework_AZNCqE89FtKmJoS6gHBD" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Build DLLs - Oxide
        run: dotnet build Rust.UIFramework.csproj -c Release /p:Platform=Oxide /p:Version=${{ env.VERSION }} -f net48
        working-directory: src/Rust.UIFramework

      - name: Build DLLs - Carbon
        run: dotnet build Rust.UIFramework.csproj -c Release /p:Platform=Carbon /p:Version=${{ env.VERSION }} -f net48
        working-directory: src/Rust.UIFramework
